package com.devdd.recipe.ui.utils.snackbarmanager

import android.view.View
import android.widget.TextView
import androidx.annotation.IdRes
import androidx.fragment.app.Fragment
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.devdd.recipe.ui.R
import com.devdd.recipe.base_android.constants.getLocalizedErrorMessage
import com.devdd.recipe.base.result.Event
import com.devdd.recipe.base.result.Result
import com.google.android.material.snackbar.BaseTransientBottomBar
import com.google.android.material.snackbar.Snackbar
import com.devdd.recipe.base.result.ServerException
import com.devdd.recipe.base_android.utils.extensions.observeEvent
import com.devdd.recipe.ui.utils.widgets.FadingSnackBar

fun Fragment.setUpSnackbar(
    snackbarMessage: LiveData<Event<SnackBarMessage>>,
    fadingSnackbar: FadingSnackBar,
    actionClickListener: () -> Unit = {}
) {
    // Show messages generated by the ViewModel
    snackbarMessage.observeEvent(viewLifecycleOwner) { (errorCode, msgResId, localizedMessage, actionId, longDuration, _) ->
        val text = if (errorCode != null) {
            getString(getLocalizedErrorMessage(errorCode) ?: msgResId)
        } else localizedMessage
        fadingSnackbar.show(
            messageId = msgResId,
            actionId = actionId,
            messageText = text,
            longDuration = longDuration,
            actionClick = {
                actionClickListener()
                fadingSnackbar.dismiss()
            }
        )
    }
}

fun makeNoInternetConnectionSnackbarWithRetryAction(
    anchor: View,
    showAction: Boolean,
    retry: () -> Unit,
): Snackbar =
    Snackbar.make(anchor, R.string.no_internet_connection, Snackbar.LENGTH_INDEFINITE)
        .setAnchorView(anchor)
        .apply {
            if (showAction) {
                setAction(R.string.no_internet_connection_action_retry) {}
                addCallback(object : BaseTransientBottomBar.BaseCallback<Snackbar>() {
                    override fun onShown(transientBottomBar: Snackbar?) {
                        super.onShown(transientBottomBar)
                        transientBottomBar?.view?.findViewById<TextView>(R.id.snackbar_action)
                            ?.setOnClickListener { retry() }
                    }
                })
            }
        }


inline fun <reified T> Result<T>.updateSnackBarErrorMsg(
    liveData: MutableLiveData<Event<SnackBarMessage>>,
    @IdRes defaultErrorMsgId: Int,
    retry: () -> Unit = {}
): Result<T> {
    if (this is Result.Error) {
        val serverError = this.exception as? ServerException
        serverError?.let {
            liveData.postValue(
                Event(
                    SnackBarMessage(
                        errorCode = it.errCode,
                        msgResId = defaultErrorMsgId,
                        localizedMessage = it.msg
                    )
                )
            )
        } ?: run {
            liveData.postValue(Event(SnackBarMessage(msgResId = defaultErrorMsgId)))
        }
        retry.invoke()
    }
    return this
}

inline fun <reified T> Result<T>.updateSnackBarSuccessMsg(
    liveData: MutableLiveData<Event<SnackBarMessage>>,
    @IdRes successMsgId: Int,
    onSuccess: () -> Unit = {}
): Result<T> {
    if (this is Result.Success) {
        liveData.postValue(Event(SnackBarMessage(msgResId = successMsgId)))
        onSuccess()
    }
    return this
}